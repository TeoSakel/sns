#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use File::Spec;
use Cwd;
use Cwd 'abs_path';

my $HELP = <<HELP;

  Run pipeline.
  Must be executed from a project directory that contains the samples.fastq-raw.csv file.

  usage: run route
  * route = name of pipeline (corresponds to a file in routes directory)

HELP

if (!$ARGV[0]) {
	die $HELP;
}

main();

# main subroutine
sub main {

	my $route = $ARGV[0];

	# current dir (should be the project dir)
	my $project_dir = getcwd();
	print "project dir: $project_dir \n";

	# code ("sns") dir (where this file is)
	my $code_dir = File::Spec->rel2abs(__FILE__);
	$code_dir = dirname($code_dir);
	chomp($code_dir);
	print "code dir: $code_dir \n";
	sleep(1);

	# check that the specified route exists
	my $route_script = "${code_dir}/routes/${route}.sh";
	unless ( -e $route_script ) {
		die "\n\n ERROR: $route DOES NOT EXIST \n\n";
	}

	# check that settings file exists
	my $settings_txt = "${project_dir}/settings.txt";
	unless ( -e $settings_txt ) {
		die "\n\n ERROR: $settings_txt DOES NOT EXIST \n\n";
	}

	# move to qsub logs dir so the qsub output ends up there
	my $qsub_logs_dir = "${project_dir}/logs-qsub";
	system("mkdir -p $qsub_logs_dir");
	print "logs dir: $qsub_logs_dir \n";
	chdir($qsub_logs_dir);

	# determine sample sheet depending on route type
	my $samples_csv = get_sample_sheet($project_dir, $code_dir, $route);
	print "sample sheet: $samples_csv \n";
	sleep(1);

	if ($route =~ "-groups-") {
		# grouped samples route (all samples processed together)
		run_groups($project_dir, $route_script);
	}
	else {
		# generic single-sample route or paired samples route (each sample or pair processed separately)
		run_samples($project_dir, $code_dir, $route, $route_script, $samples_csv);
	}

}

# get the sample sheet depending on the route type
sub get_sample_sheet {
	my $project_dir = $_[0];
	my $code_dir = $_[1];
	my $route = $_[2];

	my $samples_csv;

	if ($route =~ "-groups-") {
		$samples_csv = abs_path("${project_dir}/samples.groups.csv");
	}
	elsif ($route =~ "-pairs-") {
		$samples_csv = abs_path("${project_dir}/samples.pairs.csv");
	}
	else {
		$samples_csv = abs_path("${project_dir}/samples.fastq-raw.csv");

		# remove problematic characters from all existing samples sheets
		my @all_samples_csvs = `ls -1 ${project_dir}/samples.*.csv`;
		chomp(@all_samples_csvs);
		while (my $csv = shift(@all_samples_csvs)) {
			system("bash ${code_dir}/scripts/fix-csv.sh $csv");
		}

		sleep(1);
	}

	# check that sample sheet exists
	unless ( -e $samples_csv ) {
		die "\n\n ERROR: SAMPLE SHEET $samples_csv DOES NOT EXIST \n\n";
	}

	# remove problematic characters from sample sheet
	system("bash ${code_dir}/scripts/fix-csv.sh $samples_csv");

	return($samples_csv);

}

# process samples and submit a job for each
sub run_samples {
	my $project_dir = $_[0];
	my $code_dir = $_[1];
	my $route = $_[2];
	my $route_script = $_[3];
	my $samples_csv = $_[4];

	# find unique samples based on the sample sheet
	my @unique_samples = `cat $samples_csv | cut -d ',' -f 1 | LC_ALL=C sort | uniq`;
	if ($route =~ "-pairs-") {
		@unique_samples = `cat $samples_csv | grep -v "#SAMPLE" | tr ',' ':' | LC_ALL=C sort | uniq`;
	}
	chomp(@unique_samples);

	# check that sample names do not contain problematic characters
	my @invalid_samples = grep(/[^\w\-\.\:]/, @unique_samples);
	if (@invalid_samples) {
		my $invalid_samples_str = join(', ', @invalid_samples);
		die "\n\n ERROR: SAMPLES $invalid_samples_str CONTAIN PROBLEMATIC CHARACTERS \n\n";
	}

	# check that pairs are valid (default sample sheet has normals as "NA")
	if ($route =~ "-pairs-") {
		my @invalid_pairs = grep(/:NA$/, @unique_samples);
		if (@invalid_pairs) {
			my $invalid_pairs_str = join(', ', @invalid_pairs);
			die "\n\n ERROR: PAIRS $invalid_pairs_str CONTAIN MISSING SAMPLES (LABELED NA) \n\n";
		}
	}

	# adjust number of requested threads per sample depending on total number of samples
	my $num_samples = @unique_samples;
	my $threads;
	my $sample_pause;
	if ($num_samples < 10) {
		$threads = "8-16";
		$sample_pause = 5;
	}
	elsif ($num_samples < 50) {
		$threads = "4-8";
		$sample_pause = 2;
	}
	else {
		$threads = "4";
		$sample_pause = 1;
	}

	# process each sample
	my $current_sample = 1;
	while (my $sample = shift(@unique_samples)) {

		print "\n process sample $sample \n";

		# route command
		my $cmd = "bash $route_script $project_dir $sample";

		# split paired samples for command (needs two samples)
		if ($route =~ "-pairs-") {
			$sample =~ s/:/-/;
			$cmd =~ s/:/ /;
		}

		# check for "test" argument to test one sample without qsub (for troubleshooting)
		if (defined($ARGV[1]) && $ARGV[1] eq "test") {
			print "\n\n test run started \n\n";
			system("export NSLOTS=4 && $cmd");
			print "\n\n test run finished \n\n";
			exit;
		}

		# qsub command (run as binary bash script to keep all environment variables)
		my $email = '${USER}@nyumc.org';
		$email = `echo $email`;
		chomp($email);
		my $qsub_name = "sns.${route}.${sample}";
		# using memory limits to avoid busy nodes and prevent many jobs going to the same node
		my $qsub_mem = "-hard -l mem_free=150G -l mem_token=10G";
		my $qsub_thread = "-pe threaded ${threads}";
		my $qsub_cmd_base = "qsub -q all.q -cwd -b y -j y -N $qsub_name -M $email -m a $qsub_mem";
		my $qsub_cmd = "$qsub_cmd_base $qsub_thread $cmd";

		# paired command is single-threaded (at least for now)
		if ($route =~ "-pairs-") {
			$qsub_cmd = "$qsub_cmd_base $cmd";
		}

		print "\n CMD: $qsub_cmd \n";
		system($qsub_cmd);

		# pause between samples (sometimes job scheduler gets overwhelmed)
		sleep($sample_pause);

		# extra pause for the first few samples so it's easier to fix obvious errors
		if ($current_sample < 4) {
			sleep(15);
		}

		$current_sample++;

	}
}

# process sample groups (all samples processed together)
sub run_groups {
	my $project_dir = $_[0];
	my $route_script = $_[1];

	# route command
	my $cmd = "bash $route_script $project_dir";
	system($cmd);

}



# end
